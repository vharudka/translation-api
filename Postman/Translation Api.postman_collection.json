{
	"info": {
		"_postman_id": "f3ecc332-a7b2-48d4-9027-a7b04c9c143a",
		"name": "Translation Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Languages",
			"item": [
				{
					"name": "Options - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})\r",
									"\r",
									"pm.test(\"Allow header is present\", () => {\r",
									"    pm.response.to.have.header(\"Allow\");\r",
									"\r",
									"    const locationUrl = \"OPTIONS, POST, PUT, GET, DELETE\";\r",
									"    pm.expect(pm.response.headers.get(\"Allow\")).to.eq(locationUrl);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 201 - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Location header is present\", () => {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"\r",
									"    const data = pm.response.json();\r",
									"    pm.collectionVariables.set(\"language_id\", data.id);\r",
									"\r",
									"    const locationUrl = `${pm.environment.get(\"base_url\")}/${pm.collectionVariables.get(\"language_route\")}/${data.id}`;\r",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.eq(locationUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.id).to.be.above(0);\r",
									"    pm.expect(data.code).to.eql(pm.variables.get(\"language_code\"));\r",
									"    pm.expect(data.name).to.eql(pm.variables.get(\"language_name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\",\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Code is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Code is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": null,\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Code is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Code).length(2);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 0);\r",
									"    pm.expect(data.errors.Code[1]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"\",\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Code is out of min range Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 1);\r",
									"    pm.expect(data.errors.Code[0]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"e\",\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Code is out of max range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 3);\r",
									"    pm.expect(data.errors.Code[0]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"eng\",\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\",\r\n  \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\",\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_max_length\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\")\r",
									"                                                    .replace(\"<max>\", pm.collectionVariables.get(\"language_name_max\"))\r",
									"                                                    .replace(\"<length>\", 101);\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\",\r\n  \"name\": \"levvgepyogsdazlnzbtrzdknuqzptbmkbpdxiofzqvqoyacneaapwqowbdrmmpilwfweikuhrfuvihjoxxquzduvyqfntlfxayhro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 500 - Name is not unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.Extensions.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.Type).to.eql(pm.collectionVariables.get(\"general_500_type\"));\r",
									"    pm.expect(data.Title).to.eql(pm.collectionVariables.get(\"general_500_title\"));\r",
									"    pm.expect(data.Detail).to.eql(pm.collectionVariables.get(\"general_500_detail\"));\r",
									"    pm.expect(data.Status).to.eql(500);\r",
									"\r",
									"    pm.expect(data.Instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"en\",\r\n  \"name\": \"{{language_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 500 - Code is not unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.Extensions.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.Type).to.eql(pm.collectionVariables.get(\"general_500_type\"));\r",
									"    pm.expect(data.Title).to.eql(pm.collectionVariables.get(\"general_500_title\"));\r",
									"    pm.expect(data.Detail).to.eql(pm.collectionVariables.get(\"general_500_detail\"));\r",
									"    pm.expect(data.Status).to.eql(500);\r",
									"\r",
									"    pm.expect(data.Instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code}}\",\r\n  \"name\": \"English\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 204 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Code is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Code is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": null,\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Code is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(2);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Code\");\r",
									"    pm.expect(data.errors.Code[0]).to.eql(emptyErrorMessage);\r",
									"\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 0);\r",
									"    pm.expect(data.errors.Code[1]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Code is out of min range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 1);\r",
									"    pm.expect(data.errors.Code[0]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"p\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Code is out of max range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Code).length(1);\r",
									"    const lengthErrorMessage = pm.collectionVariables.get(\"general_422_error_length\")\r",
									"                                                     .replace(\"<propertyName>\", \"Code\")\r",
									"                                                     .replace(\"<min>\", pm.collectionVariables.get(\"language_code_min\"))\r",
									"                                                     .replace(\"<max>\", pm.collectionVariables.get(\"language_code_max\"))\r",
									"                                                     .replace(\"<length>\", 3);\r",
									"    pm.expect(data.errors.Code[0]).to.eql(lengthErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"pln\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\",\r\n  \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\",\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 500 - Code is not unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.Extensions.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.Type).to.eql(pm.collectionVariables.get(\"general_500_type\"));\r",
									"    pm.expect(data.Title).to.eql(pm.collectionVariables.get(\"general_500_title\"));\r",
									"    pm.expect(data.Status).to.eql(500);\r",
									"\r",
									"    pm.expect(data.Instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"en\",\r\n  \"name\": \"{{language_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 500 - Name is not unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.Extensions.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.Type).to.eql(pm.collectionVariables.get(\"general_500_type\"));\r",
									"    pm.expect(data.Title).to.eql(pm.collectionVariables.get(\"general_500_title\"));\r",
									"    pm.expect(data.Status).to.eql(500);\r",
									"\r",
									"    pm.expect(data.Instance).to.eql(`/api/${pm.collectionVariables.get(\"language_route\")}/${pm.collectionVariables.get(\"language_id\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"{{language_code_updated}}\",\r\n  \"name\": \"English\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 200 - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.id).to.eql(pm.variables.get(\"language_id\"));\r",
									"    pm.expect(data.code).to.eql(pm.variables.get(\"language_code_updated\"));\r",
									"    pm.expect(data.name).to.eql(pm.variables.get(\"language_name_updated\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 204 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "Options - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})\r",
									"\r",
									"pm.test(\"Allow header is present\", () => {\r",
									"    pm.response.to.have.header(\"Allow\");\r",
									"\r",
									"    const locationUrl = \"OPTIONS, POST, PUT, GET, DELETE\";\r",
									"    pm.expect(pm.response.headers.get(\"Allow\")).to.eq(locationUrl);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "OPTIONS",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 201 - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Location header is present\", () => {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"\r",
									"    const data = pm.response.json();\r",
									"    pm.collectionVariables.set(\"application_id\", data.id);\r",
									"\r",
									"    const locationUrl = `${pm.environment.get(\"base_url\")}/${pm.collectionVariables.get(\"application_route\")}/${data.id}`;\r",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.eq(locationUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    var id = (_.isEmpty(data.id));\r",
									"    pm.expect(id).to.be.false;\r",
									"    pm.expect(data.name).to.eql(pm.variables.get(\"application_name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{application_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_max_length\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\")\r",
									"                                                    .replace(\"<max>\", pm.collectionVariables.get(\"language_name_max\"))\r",
									"                                                    .replace(\"<length>\", 101);\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"levvgepyogsdazlnzbtrzdknuqzptbmkbpdxiofzqvqoyacneaapwqowbdrmmpilwfweikuhrfuvihjoxxquzduvyqfntlfxayhro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 200 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{application_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 422 - Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{application_name_updated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/7a0efb6a-d292-45fe-8471-62458d431c0a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"7a0efb6a-d292-45fe-8471-62458d431c0a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 200 - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Head - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/7a0efb6a-d292-45fe-8471-62458d431c0a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"7a0efb6a-d292-45fe-8471-62458d431c0a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.id).to.eql(pm.variables.get(\"application_id\"));\r",
									"    pm.expect(data.name).to.eql(pm.variables.get(\"application_name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/7a0efb6a-d292-45fe-8471-62458d431c0a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"7a0efb6a-d292-45fe-8471-62458d431c0a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 204 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/7a0efb6a-d292-45fe-8471-62458d431c0a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"7a0efb6a-d292-45fe-8471-62458d431c0a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application Languages",
			"item": [
				{
					"name": "Create - 201 - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Location header is present\", () => {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    const locationUrl = `${pm.environment.get(\"base_url\")}/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_route\")}/${data.languageId}`;\r",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.eq(locationUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"languageId\": {{language_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 500 - LanguageId is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.Extensions.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.Type).to.eql(pm.collectionVariables.get(\"general_500_type\"));\r",
									"    pm.expect(data.Title).to.eql(pm.collectionVariables.get(\"general_500_title\"));\r",
									"    pm.expect(data.Detail).to.eql(pm.collectionVariables.get(\"general_500_detail\"));\r",
									"    pm.expect(data.Status).to.eql(500);\r",
									"\r",
									"    pm.expect(data.Instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 400 - LanguageId is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_400_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_400_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_400_detail\"));\r",
									"    pm.expect(data.status).to.eql(400);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_route\")}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"languageId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.applicationId).to.eql(pm.variables.get(\"application_id\"));\r",
									"    pm.expect(data.applicationName).to.eql(pm.variables.get(\"application_name\"));\r",
									"    pm.expect(data.languageId).to.eql(pm.variables.get(\"language_id\"));\r",
									"    pm.expect(data.languageCode).to.eql(pm.variables.get(\"language_code\"));\r",
									"    pm.expect(data.languageName).to.eql(pm.variables.get(\"language_name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 204 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}/{{language_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}",
								"{{language_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_route}}",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language Resource Group",
			"item": [
				{
					"name": "Create - 201 - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Location header is present\", () => {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.collectionVariables.set(\"language_resource_group_id\", data.id);\r",
									"\r",
									"    const locationUrl = `${pm.environment.get(\"base_url\")}/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_resource_group_route\")}/${data.id}`;\r",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.eq(locationUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{language_resource_group_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_resource_group_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_resource_group_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_resource_group_route\")}`);\r",
									"    \r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_empty\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\");\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - 422 - Name is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"    pm.expect(data.errors).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_422_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_422_title\"));\r",
									"    pm.expect(data.status).to.eql(422);\r",
									"    pm.expect(data.detail).to.eql(pm.collectionVariables.get(\"general_422_detail\"));\r",
									"\r",
									"    pm.expect(data.instance).to.eql(`/api/${pm.collectionVariables.get(\"application_route\")}/${pm.collectionVariables.get(\"application_id\")}/${pm.collectionVariables.get(\"language_resource_group_route\")}`);\r",
									"\r",
									"    pm.expect(data.errors.Name).length(1);\r",
									"    const emptyErrorMessage = pm.collectionVariables.get(\"general_422_error_max_length\")\r",
									"                                                    .replace(\"<propertyName>\", \"Name\")\r",
									"                                                    .replace(\"<max>\", pm.collectionVariables.get(\"language_name_max\"))\r",
									"                                                    .replace(\"<length>\", 101);\r",
									"    pm.expect(data.errors.Name[0]).to.eql(emptyErrorMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"levvgepyogsdazlnzbtrzdknuqzptbmkbpdxiofzqvqoyacneaapwqowbdrmmpilwfweikuhrfuvihjoxxquzduvyqfntlfxayhro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 200 - Ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.id).to.eql(pm.variables.get(\"language_resource_group_id\"));\r",
									"    pm.expect(data.name).to.eql(pm.variables.get(\"language_resource_group_name\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}/{{language_resource_group_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}",
								"{{language_resource_group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 204 - No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"There is no response body\", function () {\r",
									"    var response = (_.isEmpty(responseBody));\r",
									"    pm.expect(response).to.be.true\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}/{{language_resource_group_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}",
								"{{language_resource_group_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - 404 - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid body\", function () {\r",
									"    const data = pm.response.json();\r",
									"    \r",
									"    pm.expect(data.traceId).is.not.oneOf([null, undefined])\r",
									"\r",
									"    pm.expect(data.type).to.eql(pm.collectionVariables.get(\"general_404_type\"));\r",
									"    pm.expect(data.title).to.eql(pm.collectionVariables.get(\"general_404_title\"));\r",
									"    pm.expect(data.status).to.eql(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{application_route}}/{{application_id}}/{{language_resource_group_route}}/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{application_route}}",
								"{{application_id}}",
								"{{language_resource_group_route}}",
								"0"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "general_400_type",
			"value": "https://tools.ietf.org/html/rfc7231#section-6.5.1"
		},
		{
			"key": "general_400_title",
			"value": "One or more validation errors occurred."
		},
		{
			"key": "general_400_detail",
			"value": "See the errors field for details."
		},
		{
			"key": "general_404_type",
			"value": "https://tools.ietf.org/html/rfc7231#section-6.5.4"
		},
		{
			"key": "general_404_title",
			"value": "Not Found"
		},
		{
			"key": "general_422_type",
			"value": "https://tools.ietf.org/html/rfc4918#section-11.2"
		},
		{
			"key": "general_422_title",
			"value": "One or more validation errors occurred."
		},
		{
			"key": "general_422_detail",
			"value": "See the errors field for details."
		},
		{
			"key": "general_422_error_empty",
			"value": "'<propertyName>' must not be empty."
		},
		{
			"key": "general_422_error_length",
			"value": "'<propertyName>' must be between <min> and <max> characters. You entered <length> characters."
		},
		{
			"key": "general_422_error_max_length",
			"value": "The length of '<propertyName>' must be <max> characters or fewer. You entered <length> characters."
		},
		{
			"key": "general_500_type",
			"value": "https://tools.ietf.org/html/rfc7231#section-6.6.1"
		},
		{
			"key": "general_500_title",
			"value": "Internal Server Error"
		},
		{
			"key": "general_500_detail",
			"value": "An error has occured while processing the request."
		},
		{
			"key": "language_route",
			"value": "Languages"
		},
		{
			"key": "language_id",
			"value": "0"
		},
		{
			"key": "language_code",
			"value": "tt"
		},
		{
			"key": "language_name",
			"value": "EnglishTest"
		},
		{
			"key": "language_code_updated",
			"value": "dd"
		},
		{
			"key": "language_name_updated",
			"value": "EnglishTestUpdated"
		},
		{
			"key": "language_code_min",
			"value": "2"
		},
		{
			"key": "language_code_max",
			"value": "2"
		},
		{
			"key": "language_name_max",
			"value": "100"
		},
		{
			"key": "application_route",
			"value": "Applications"
		},
		{
			"key": "application_id",
			"value": "21358142-5aff-418c-0ae7-08d890856fab"
		},
		{
			"key": "application_name",
			"value": "TestApplicationName"
		},
		{
			"key": "application_name_updated",
			"value": "TestApplicationNameUpdated"
		},
		{
			"key": "application_name_max",
			"value": "100"
		},
		{
			"key": "language_resource_group_route",
			"value": "Language-resource-groups"
		},
		{
			"key": "language_resource_group_name",
			"value": "TestLanguageResourceGroupName"
		},
		{
			"key": "language_resource_group_id",
			"value": "0"
		}
	]
}